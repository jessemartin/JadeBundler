var jade = require('jade'),
  fs = require('fs'),
  path = require('path');

module.exports = {
  'views': {},
  // Export the current views as a JSON object
  'export': function () {
    var viewObj = this.views,
      viewNames = Object.getOwnPropertyNames(viewObj),
      jsonObj = {};

    // Iterate the views in the view object
    viewNames.forEach(function (viewName) {
      var fnStr = viewObj[viewName].toString();

      // Remove 'anonymous' name and replace all line breaks for function
      fnStr = fnStr.replace(/function\s+anonymous\(/, 'function (').replace(/\n/g, ' ');

      // TODO: Be less hackish
      // Wrap the fnStr to remove funtion wrappings
      fnStr = '~PRE~' + fnStr + '~POST~';

      // Save the fnStr to the jsonObj
      jsonObj[viewName] = fnStr;
    });

    // Stringify the JSON
    var viewJson = JSON.stringify(jsonObj);

    // Strip out the ~PRE~ and ~POST~ items along with their adjacent quotes
    viewJson = viewJson.replace(/"~PRE~/g, '').replace(/~POST~"/g, '');

    // Return the JSON with functions
    return viewJson;
  },
  // Helper method that writes a file for require.js
  // TODO: Figure out how to make this better (should have a set of engines
  // TODO: Minify the output code (have a config on module.exports for that
  'writeTo': function (filename) {
    var viewJson = this.export();

    // Create views file
    fs.writeFileSync(filename, 'define(' + viewJson + ');', 'utf8');
  },
  // 'add': function (view) {
    // // Detect if the view is a file or a directory
      // // and use the appropriate method
  // },
  // 'addFile': function (viewPath) {
    // TODO: Use the 'eachFilePath' function from 'bundle'

  // },
  // 'addDir': function (viewDir) {
  'bundle': function (viewDir) {
    var viewObj = this.views;

    // Read views dir
    // TODO: Use this.addFile
    fs.readdirSync(viewDir).forEach(function eachFilePath (fileName) {

      // Populate viewObj object with jade function
      var filePath = path.join(viewDir, fileName),
          fileContents = fs.readFileSync();

      // Extract filename without extension (to be used as key)
      var template = path.basename(fileName, '.jade');

      // Compile template and store it in the view object
      viewObj[template] = jade.compile(fileContents, {client: true});
    });

    // Return the JSON object
    return viewObj;
  }
};
